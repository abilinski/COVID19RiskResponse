---
output:
  pdf_document:
    keep_tex: true
    fig_caption: yes
header-includes: 
  - \usepackage[USenglish]{babel}
  - \usepackage{fancyhdr}
  - \pagestyle{fancy}
  - \renewcommand{\sectionmark}[1]{\markright{#1}}
  - \fancyhf{}
  - \lhead{{}}
  - \rhead{{\today}} 
  - \cfoot{{\thepage}}
  - \usepackage[T1]{fontenc}
  - \usepackage{bm}
  - \usepackage{mathpazo}
  - \usepackage{tabularx}
  - \usepackage{titlesec}
  - \usepackage{graphicx, xcolor}
  - \usepackage{wrapfig}
  - \usepackage{amssymb}
  - \usepackage{amsmath}
  - \usepackage{lscape}
  - \usepackage{esint}
  - \usepackage{paralist}
  - \usepackage{outlines}
  - \newcommand{\I}{\textrm{I}}
  - \newcommand{\N}{\mathcal{N}}
  - \newcommand{\D}{\textrm{D}}
  - \newcommand{\E}{\mathbb{E}}
  - \setlength{\parskip}{1em} %0.5\baselineskip
  - \setlength{\parindent}{0pt}
  - \linespread{1.15}
  - \titleformat*{\section}{\Large\scshape\bfseries}
  - \titleformat*{\subsection}{\large\scshape\bfseries}
  - \titleformat*{\subsubsection}{\bfseries}
  - \titleformat*{\paragraph}{\bfseries}
  - \titleformat*{\subparagraph}{\bfseries}
  - \renewcommand{\thesection}{\Roman{section}.} % 1.A. as subsections
  - \renewcommand{\thesubsection}{\Alph{subsection}.} % 1.A. as subsections
  - \titlespacing{\section}{0pt}{2pt}{3pt}
  - \titlespacing{\subsection}{0pt}{2pt}{2pt}
  - \titlespacing{\subsubsection}{0pt}{0pt}{0pt}
  - \titlespacing{\paragraph}{0pt}{1pt}{5pt}
  - \titlespacing{\subparagraph}{10pt}{1pt}{5pt}
  - \usepackage{hyperref}
  - \usepackage[font={footnotesize}]{subcaption}
  - \usepackage[font={footnotesize}]{caption}
  - \usepackage{caption, setspace}
  - \captionsetup{font={stretch=1}}
  - \captionsetup[figure]{font=footnotesize,labelfont=footnotesize}
  - \usepackage{tabto}
  - \def\quoteattr#1#2{\setbox0=\hbox{#2}#1\tabto{\dimexpr\linewidth-\wd0}\box0}
  - \makeatletter
  - \newcommand{\pushright}[1]{\ifmeasuring@#1\hfill$\displaystyle#1$\fi\ignorespaces}
  - \makeatother
  - \newcommand{\FixMe}[1]{\textcolor{orange}{ [#1]}}
  - \newcommand{\Comment}[1]{\textcolor{purple}{\textit{[#1]}}}
  - \newcommand{\Quickwin}{{\color{blue}{$\bigstar$}} }
  - \usepackage{letltxmacro}
  - \LetLtxMacro\Oldfootnote\footnote
  - \newcommand{\EnableFootNotes}{\LetLtxMacro\footnote\Oldfootnote}
  - \newcommand{\DisableFootNotes}{\renewcommand{\footnote}[2][]{\relax}}
  - \makeatother
  - \graphicspath{{../Output/"}}

---

\begin{center} 
    \textbf{\scshape \LARGE Figures and Supplement}\\  \vspace{2mm}
    {\large Trends in risk perceptions, behavioral responses, and Covid-19 infection rates in the US
}\\ \vspace{2mm} 
    {\large Alyssa Bilinski\footnote{Contact: abilinski@g.harvard.edu} $\cdot$ Ezekiel Emanuel $\cdot$ Joshua Salomon $\cdot$ Atheendar Venkataramani} \\
\end{center}
    
\vspace{-0.50em}

\bigskip


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, warning = F, message = F)
```


```{r echo = F}

# libraries
library(tidyverse)
library(survey)
library(knitr)
library(spatstat)
library(lubridate) 
library(stringr)
library(ISOweek)
library(Rfast)
library(stargazer)
library(knitr)
library(ggpubr)
library(gridExtra)

# set working directory
setwd("~/Dropbox/CMU Survey/National analysis/0 - Aggregated data")
load("summary_extract2020-12-07.RData")

# state names + abbreviations + populations
pop = read.csv("population.csv")

# load and process case data
data <- read.csv("all-states-history2.csv") %>% left_join(pop, c("state" = "State")) %>%
  mutate(date_cleaned = as.Date(as.character(date), format = "%m/%d/%y"),
         week = isoweek(date_cleaned)) %>%
  group_by(week) %>% mutate(date.temp = max(date_cleaned)) %>% ungroup() %>%
  dplyr::group_by(state, region, StateName, week, date.temp) %>% 
  dplyr::summarize(cases = sum(positiveIncrease), deaths = sum(deathIncrease), hosp = sum(hospitalizedIncrease),
            perc_pos = sum(positiveIncrease)/sum(positiveIncrease + negativeIncrease),
            cases100K = cases/Population[1]*100000, deaths100K = deaths/Population[1]*100000, hosp100K = hosp/Population[1]*100000,
            tests = sum(positiveIncrease + negativeIncrease), tests_prop = tests/Population[1]) %>%
  gather(var, value, cases, deaths, hosp, perc_pos, cases100K, deaths100K, hosp100K, tests, tests_prop) %>%
  group_by(state, region, var) %>% mutate(
    value = ifelse(value<0, 0, value),
    lag1 = lag(value, 1),
                                           lag2 = lag(value, 2),
                          lead = lead(value, 1),
                           lead2 = lead(value, 2),
                                           chg = value - lag1,
                                           perc_chg = (value - lag1)/lag1) %>%
  gather(var2, value2, value, lag1, lag2, lead, lead2, chg, perc_chg) %>% mutate(ind = paste(var, var2, sep = "_")) %>%
  ungroup() %>% dplyr::select(-var, -var2) %>%
  spread(ind, value2) %>% group_by(state, region) %>% 
  mutate(max = max(cases100K_value, na.rm = T),
         max.week = week[cases100K_value==max],
         max.date = date.temp[cases100K_value==max],

         peak.time = ifelse(max.date < as.Date("2020-07-01"), "Spring", "Summer"),
         peak.time = ifelse(max.date > as.Date("2020-08-15"), "Increasing", peak.time),
         
         min.summer = min(cases100K_value[date.temp>"2020-05-15" & date.temp<"2020-08-01"]),
         min.week = week[cases100K_value==min.summer],
         max.summer = max(cases100K_value[date.temp> "2020-07-01"]),
         
         weeks.since.peak = week - max.week,
         weeks.since.min = week - min.week
         
         ) %>% ungroup() 

data2 = data %>% group_by(state) %>% 
  summarize(sum1 = sum(cases100K_value[date.temp>="2020-03-01" & date.temp<"2020-05-31"]),
            sum2 = sum(cases100K_value[date.temp>="2020-07-01" & date.temp<"2020-08-31"]),
            sum3 = sum(cases100K_value[date.temp>="2020-09-01" & date.temp<"2020-10-31"]))

spring = unlist(data2 %>% arrange(-sum1) %>% dplyr::select(state) %>% filter(state!="LA"))[1:10]
summer = unlist(data2 %>% arrange(-sum2) %>% dplyr::select(state) %>% filter(state!="LA"))[1:10]
fall = unlist(data2 %>% arrange(-sum3) %>% dplyr::select(state))[1:10]

US_pop = 328200000
national <- read.csv("all-states-history2.csv") %>% 
  mutate(date_cleaned = as.Date(as.character(date), format ="%m/%d/%y"),
         week = isoweek(date_cleaned)) %>% group_by(week) %>% 
  summarize(cases = sum(positiveIncrease), deaths = sum(deathIncrease), hosp = sum(hospitalizedIncrease),
            perc_pos = sum(positiveIncrease)/sum(positiveIncrease + negativeIncrease),
            cases100K = cases/US_pop*100000, deaths100K = deaths/US_pop*100000, hosp100K = hosp/US_pop*100000, tests = sum(positiveIncrease + negativeIncrease)) %>%
  gather(var, value, cases, deaths, hosp, perc_pos, cases100K, deaths100K, hosp100K, tests) %>%
  group_by(var) %>% mutate(lag1 = lag(value, 1),
                           lag2 = lag(value, 2),
                           lead = lead(value, 1),
                           lead2 = lead(value, 2),
                                  chg = value - lag1,
                                  perc_chg = (value - lag1)/lag1) %>%
  gather(var2, value2, value, lag1, lag2, chg, perc_chg) %>% mutate(ind = paste("natl", var, var2, sep = "_")) %>%
  ungroup() %>% select(-var, -var2) %>%
  spread(ind, value2)

# merge data
all = h %>% filter(date<="2020-11-22") %>%
  #left_join(data, c("state_coded" = "StateName", "week" = "week")) %>% 
  left_join(data, c("state_id" = "state", "week" = "week")) %>% 
  #left_join(national, c("week" = "week")) %>% 
  mutate(no_contacts = 1-contacts, people = 1-avoid_people, not_worry = 1-worried_sick, contacts_1 = 1-contacts_1, contacts_2 = 1-contacts_2, worried_sick = worried_sickv2, avoid_people = avoid_peoplev2, activities_masked_or_none_orig = activities_masked_or_none, activities_masked_or_none = activities_masked_or_nonev2)
us = i %>% filter(date>="2020-05-01") %>% left_join(national, c("week" = "week")) %>% mutate(no_contacts = 1-contacts, people = 1-avoid_people, not_worry = 1-worried_sick, contacts_1 = 1-contacts_1, contacts_2 = 1-contacts_2, worried_sick = worried_sickv2, avoid_people = avoid_peoplev2,activities_masked_or_none = activities_masked_or_nonev2)

pal = c("#457b9d", "#449187", "#52bdd3", "#a8ccb4")
theme_opts = theme_minimal() + theme(text = element_text(family = "sans"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "darkgrey"))

size = 12
font = 3
lim = 8

#View(us %>% dplyr::select(date, worried_sick))

```

\clearpage


```{r fig1, echo = F, results = "tex", fig.height = 11, fig.width = 9, fig.align = "center", fig = T, fig.cap = "\\label{fig2} Trends by state, May 15, 2020 to September 6, 2020.  The dark line is the average, while the grey lines are individual states.  Note that y-axes differ across variables.  Due to survey reordering and minor wording changes, survey result levels are not directly comparable between Figures 1 and 2."}

#f = data %>% group_by(state) %>% summarize(max1 = max(cases100K_value[week < 18]), max2 = max(cases100K_value[week >= 23 & week < 36]), max3 = max(cases_value[week<23]), max4 = max(cases_value[week>=23 & week < 36]), sum1 = sum(cases100K_value[week<23]), sum2 = sum(cases100K_value[week >= 23 & week < 36]))

plotK = all %>% filter(!is.na(region)) %>%
  gather(var, value, worried_sick, no_contacts, cases100K_value, contacts_avg_mod, avoid_people, 
         masks, activities_any, activities_indoors, activities_high_risk, activities_masked, activities_masked_or_none_orig, activities_masked_or_none, activities_masked_or_nonev3) %>%
  group_by(var, state_id, region) %>%
  filter(date >= as.Date("2020-05-15")) %>%
  mutate(state_cat = ifelse(state_id %in% spring, "Spring peak", "Summer peak"),
         state_cat = ifelse(state_id %in% fall, "Fall peak", state_cat),
         state_cat = factor(state_cat, levels = c("Spring peak", "Summer peak", "Fall peak")),
         region = factor(region, levels = c("Northeast", "West", "South", "Midwest")),
        var_cat = ifelse(grepl("cases100K_value", var), "Cases per 100K", "Worried about severe illness"),
         var_cat = ifelse(grepl("perc_pos", var), "Percent positive tests", var_cat),
         var_cat = ifelse(grepl("hosp", var), "Hospitalizations", var_cat),
         var_cat = ifelse(grepl("avoid", var), "Avoiding others all/most of time", var_cat),
         var_cat = ifelse(var=="no_contacts", "No contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts", "No contacts outside home ", var_cat),
         var_cat = ifelse(var=="contacts_1", "Less than 2 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_2", "Less than 3 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_5", "More than 6 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_avg_mod", "Average contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_median", "Median contacts outside home", var_cat),
        var_cat = ifelse(var=="masks", "Masks all or most of the time in public", var_cat),
         var_cat = ifelse(var=="activities_any", "Public activities", var_cat),
         var_cat = ifelse(var=="activities_indoors", "Indoor public activities", var_cat),
         var_cat = ifelse(var=="activities_masked", "Mask during public activities", var_cat),
        var_cat = ifelse(var=="activities_high_risk", "High risk public activities", var_cat),
        var_cat = ifelse(var=="activities_masked_or_none", "Unmasked public activities", var_cat),

         var_cat = factor(var_cat, levels = c("Cases per 100K", "Percent positive tests", "Hospitalizations", "Worried about severe illness", "No contacts outside home", "Avoiding others all/most of time",
                                              "No contacts outside home ", "Less than 2 contacts outside home",
                                               "Less than 3 contacts outside home",  "More than 6 contacts outside home", "Average contacts outside home", "Median contacts outside home", "Masks all or most of the time in public", "Public activities", "Indoor public activities", "Mask during public activities", "High risk public activities", "Unmasked public activities")),
        value2 = c(NA, diff(value)))

plot2b = plotK %>%
  group_by(var, var_cat, date, region) %>% 
  summarize(state_id = state_cat[1],
    value = weighted.mean(value, w = weight),
           value_raw = mean(value)) %>% 
  mutate(state_id = "Average") %>%
  group_by(var, var_cat, region) %>%
         mutate(value2 = c(NA, diff(value)))

plot2_temp = bind_rows(plotK, plot2b) %>% mutate(alpha = ifelse(state_id=="Average", 1, .05), 
                                                  col = ifelse(var=="contacts_avg_mod", value2 > 0, value2 < 0)) 
 # NULL

plot2 = plot2_temp %>% filter(date<="2020-09-08")
#View(plot2)
#plot2 = plot2b


#View(plot2 %>% dplyr::select(state_cat, state_id, date, week, var, value) %>% arrange(state_cat, date) %>% group_by(state_cat, state_id, var) %>% mutate(value = ifelse(var=="contacts_avg", value*-1, value)) %>% summarize(date_max = date[value == max(value[week>=27])], max_value = max(value[week>=27]), min_value = min(value[date<=date_max]), diff = max_value - min_value))

# temp = plot2 %>% dplyr::select(state_cat, state_id, date, week, var, value) %>% arrange(state_cat, date) %>% group_by(state_cat, state_id, var) %>% mutate(value = ifelse(var=="contacts_avg", value*-1, value)) %>% summarize(date_max = date[value == max(value[week>=27 & week<=30])], max_value = max(value[week>=27& week<=30]), min_date = date[value == min(value[date<=date_max])], min_value = min(value[date<=date_max]), diff = max_value - min_value)

#View(temp %>% group_by(state_cat, var) %>% summarize(max(diff), min(diff)))

#View(plot2 %>% filter(var == "avoid_people") %>% dplyr::select(state_cat, date, week, var, value, value_w) %>% arrange(state_cat, date) %>% group_by(state_cat, var) %>% summarize(date_max = date[value_w == max(value_w[week>=27])], max_value = max(value_w[week>=27]), min_value = min(value_w[date<=date_max]), diff = max_value - min_value))
 
#View(plot2 %>% filter(var == "contacts_avg") %>% dplyr::select(state_cat, date, var, value) %>% arrange(state_cat, date))

#View(plot2 %>% filter(var == "contacts_avg") %>% dplyr::select(state_cat, date, week, var, value) %>% arrange(state_cat, date) %>% group_by(state_cat, var) %>% summarize(min_max = min(value[week>=23]) - max(value[week<36]), max_min = max(value[week>=23]) - min(value[week<36])))

#f = data %>% group_by(state) %>% summarize(max1 = max(cases100K_value[week < 18]), max2 = max(cases100K_value[week >= 23 & week < 36]), max3 = max(cases_value[week<23]), max4 = max(cases_value[week>=23 & week < 36]), sum1 = sum(cases100K_value[week<23]), sum2 = sum(cases100K_value[week >= 23 & week < 36]))

plot2a = ggplot(plot2 %>% filter(var=="cases100K_value"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  #geom_point(aes(x = as.Date("2020-08-31")), col = "white", size = 5) + 
  #geom_text(aes(x = as.Date("2020-08-31"), label = ifelse(date=="2020-08-30", state_id, NA)), size = 3) + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") + scale_shape(guide = F) +
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

plot2b = ggplot(plot2 %>% filter(var=="worried_sick"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

plot2c = ggplot(plot2 %>% filter(var=="contacts_avg_mod"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

plot2e = ggplot(plot2 %>% filter(var=="avoid_people"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") + scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

ggarrange(plot2a, plot2b, plot2c, plot2e, nrow = 4, common.legend = TRUE, legend="right")
```

\clearpage

```{r fig2, echo = F, results = "tex", fig.height = 11, fig.width = 9, fig.align = "center", fig = T, fig.cap = "\\label{fig2} Trends by state from September 13, 2020 through November 1, 2020.  The dark line is the average, while the grey lines are individual states.  Note that y-axes differ across variables.  Due to survey reordering and minor wording changes, survey result levels are not directly comparable between Figures 1 and 2."}

plot2 = plot2_temp %>% filter(date >= "2020-09-14")

plot4a = ggplot(plot2 %>% filter(var=="cases100K_value"), aes(x = date, y = value, group = paste(var, state_id, date>"2020-09-08"), alpha = alpha)) + geom_line() + 
  #geom_point(aes(x = as.Date("2020-08-31")), col = "white", size = 5) + 
  #geom_text(aes(x = as.Date("2020-08-31"), label = ifelse(date=="2020-08-30", state_id, NA)), size = 3) + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Paired") + scale_shape(guide = F) +
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region) + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

plot4b = ggplot(plot2 %>% filter(var=="worried_sick"), aes(x = date, y = value, group = paste(var, state_id, date>"2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Paired") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region) + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

plot4c = ggplot(plot2 %>% filter(var=="contacts_avg_mod"), aes(x = date, y = value, group = paste(var, state_id, date>"2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Paired") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region) + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

plot4d = ggplot(plot2 %>% filter(var=="activities_high_risk"), aes(x = date, y = value, group = paste(var, state_id, date>"2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Paired") + scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region) + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

plot4e = ggplot(plot2 %>% filter(var=="activities_masked_or_none"), aes(x = date, y = 1-value, group = paste(var, state_id, date>"2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Paired") + scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region) + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

ggarrange(plot4a, plot4b, plot4c, plot4e, nrow = 4, common.legend = TRUE, legend="right")

```

\clearpage

# Misc

```{r echo = F, results = "tex", fig.height = 9, fig.width = 10, fig.align = "center", fig = T, fig.cap = "\\label{fig2} Changes in social distancing during September-November 2020."}

f = plot2_temp %>% ungroup() %>%
  select(date, state_id, var, value, region) %>% arrange(state_id, var, date) %>% 
  dplyr::filter(var%in%c("activities_any", "cases100K_value", "contacts_avg_mod", "activities_masked", "activities_high_risk", "worried_sick", "activities_masked_or_none_orig","activities_masked_or_none", "activities_masked_or_nonev3", "avoid_people")) %>% 
  group_by(region, state_id, var) %>% 
  summarize(val = value[date=="2020-11-22"]-value[date=="2020-09-20"], 
            post =  value[date=="2020-11-22"], pre = value[date=="2020-09-20"],
            tot = sum(value)/length(value)) %>%
  arrange(var, val) %>% group_by(region, state_id) %>% 
  mutate(chg = tot[var=="cases100K_value"]) %>% ungroup() %>% 
  mutate(var_cat = ifelse(var=="activities_high_risk", "No high risk activites", "Unmasked public activities")) 

# options
#View(f %>% filter(state_id=="Average") %>% mutate(pre = 1-pre, post = 1-post))

# last line
#View(f %>% filter(state_id %in% fall & var=="activities_masked_or_none") %>% mutate(pre = 1-pre, post = 1-post) %>% arrange(val))

# fall highest
plotFALL = plotK %>% mutate(fall = state_id%in%fall) %>%
  group_by(var, var_cat, date, fall) %>% 
  summarize(state_id = state_cat[1],
    value = weighted.mean(value, w = weight),
           value_raw = mean(value)) 

  f2 = plotFALL %>% ungroup() %>%
  select(date, state_id, var, value, fall) %>% arrange(var, date) %>% 
  dplyr::filter(var%in%c("activities_any", "cases100K_value", "contacts_avg", "contacts_avg_mod", "activities_masked", "activities_high_risk", "worried_sick", "activities_masked_or_none_orig", "activities_masked_or_none", "activities_masked_or_nonev3", "avoid_people")) %>% 
  group_by(fall, var) %>% 
  summarize(val = value[date=="2020-11-22"]-value[date=="2020-09-20"], 
            post =  value[date=="2020-11-22"], pre = value[date=="2020-09-20"],
            tot = sum(value)/length(value)) %>%
  arrange(var, val) 
  
  
  plotFALL = plotK %>% mutate(fall = state_id%in%fall) %>%
  group_by(var, var_cat, date) %>% 
  summarize(state_id = state_cat[1],
    value = weighted.mean(value, w = weight),
           value_raw = mean(value)) 

  f2 = plotFALL %>% ungroup() %>%
  select(date, state_id, var, value) %>% arrange(var, date) %>% 
  dplyr::filter(var%in%c("activities_any", "cases100K_value", "contacts_avg", "activities_masked", "activities_high_risk", "worried_sick", "activities_masked_or_none_orig", "activities_masked_or_none", "activities_masked_or_nonev3", "avoid_people")) %>% 
  group_by(var) %>% 
  summarize(val = value[date=="2020-11-22"]-value[date=="2020-09-20"], 
            post =  value[date=="2020-11-22"], pre = value[date=="2020-09-20"],
            tot = sum(value)/length(value)) %>%
  arrange(var, val)
  
  # early
  
  plotFALL = plotK %>% filter(state_id%in%c(spring, summer)) %>%
    mutate(cat = ifelse(state_id%in%spring, "Spring", "Summer")) %>%
  group_by(var, var_cat, date, cat) %>% 
  summarize(state_id = state_cat[1],
    value = weighted.mean(value, w = weight),
           value_raw = mean(value)) 
  
  #View(f2)

g = f %>%
  filter(state_id!="Average")

a = ggplot(g %>% filter(var%in%c("activities_high_risk")) %>%
         mutate(state_id = fct_reorder(state_id, desc(post))), 
       aes(y = state_id, col = region)) + 
  #  geom_point(aes(x = post, label = state_id), col = "white", size = 4) + 
  #geom_text(aes(x = post, label = state_id), size = 3) + 
  scale_color_brewer(palette="Set1", name = "") +
  geom_segment(arrow=arrow(length=unit(0.1,"cm")),
                     aes(x = pre, xend = post, y = state_id, yend = state_id)) + facet_wrap(.~var_cat, scales = "free") + 
  theme_minimal() + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+labs(x = "", y = "")

b = ggplot(g %>% filter(var%in%c("activities_masked_or_none")) %>%
         mutate(state_id = fct_reorder(state_id, desc(-post))), 
       aes(y = state_id, col = region)) + 
    scale_color_brewer(palette="Set1", name = "") +
  geom_segment(arrow=arrow(length=unit(0.1,"cm")),
                     aes(x = 1-pre, xend = 1-post, y = state_id, yend = state_id)) + facet_wrap(.~var_cat, scales = "free") + 
  theme_minimal() + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+labs(x = "", y = "")

ggarrange(a,b,ncol=2, common.legend = T, legend = "bottom")

```

```{r, fig.width = 10}


b = ggplot(g %>% filter(var%in%c("activities_masked_or_none")) %>%
         mutate(state_id = fct_reorder(state_id, desc(-post))), 
       aes(x = state_id, col = region)) + 
    scale_color_brewer(palette="Set1", name = "") +
  geom_text(aes(y = 1-post - .05, label = state_id), size = 3) + 
  geom_segment(arrow=arrow(length=unit(0.1,"cm")),
                     aes(y = 1-pre, yend = 1-post, x = state_id, xend = state_id)) + facet_wrap(.~var_cat, scales = "free") + 
  theme_minimal() + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))+labs(x = "", y = "")

b

```

\clearpage

```{r figz, echo = F, results = "tex", fig.height = 8, fig.width = 9, fig.align = "center", fig = T, fig.cap = "Trends by state, May 15, 2020 to September 6, 2020.  The dark line is the average, while the grey lines are individual states.  Note that y-axes differ across variables.  Due to survey reordering and minor wording changes, survey result levels are not directly comparable between Figures 1 and 2."}

#f = data %>% group_by(state) %>% summarize(max1 = max(cases100K_value[week < 18]), max2 = max(cases100K_value[week >= 23 & week < 36]), max3 = max(cases_value[week<23]), max4 = max(cases_value[week>=23 & week < 36]), sum1 = sum(cases100K_value[week<23]), sum2 = sum(cases100K_value[week >= 23 & week < 36]))

plotK = all %>% filter(!is.na(region)) %>%
  gather(var, value, worried_sick, no_contacts, cases100K_value, contacts_avg_mod, avoid_people, 
         masks, activities_any, activities_indoors, activities_high_risk, activities_masked, activities_masked_or_none_orig, activities_masked_or_none, activities_masked_or_nonev3, cli_v1) %>%
  group_by(var, state_id, region) %>%
  mutate(state_cat = ifelse(state_id %in% spring, "Spring peak", "Summer peak"),
         state_cat = ifelse(state_id %in% fall, "Fall peak", state_cat),
         state_cat = factor(state_cat, levels = c("Spring peak", "Summer peak", "Fall peak")),
         region = factor(region, levels = c("Northeast", "West", "South", "Midwest")),
        var_cat = ifelse(grepl("cases100K_value", var), "Cases per 100K", "Worried about severe illness"),
        var_cat = ifelse(grepl("cli", var), "CLI", var_cat),
         var_cat = ifelse(grepl("perc_pos", var), "Percent positive tests", var_cat),
         var_cat = ifelse(grepl("hosp", var), "Hospitalizations", var_cat),
         var_cat = ifelse(grepl("avoid", var), "Avoiding others all/most of time", var_cat),
         var_cat = ifelse(var=="no_contacts", "No contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts", "No contacts outside home ", var_cat),
         var_cat = ifelse(var=="contacts_1", "Less than 2 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_2", "Less than 3 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_5", "More than 6 contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_avg_mod", "Average contacts outside home", var_cat),
         var_cat = ifelse(var=="contacts_median", "Median contacts outside home", var_cat),
        var_cat = ifelse(var=="masks", "Masks all or most of the time in public", var_cat),
         var_cat = ifelse(var=="activities_any", "Public activities", var_cat),
         var_cat = ifelse(var=="activities_indoors", "Indoor public activities", var_cat),
         var_cat = ifelse(var=="activities_masked", "Mask during public activities", var_cat),
        var_cat = ifelse(var=="activities_high_risk", "High risk public activities", var_cat),
        var_cat = ifelse(var=="activities_masked_or_none", "Unmasked public activities", var_cat),

         var_cat = factor(var_cat, levels = c("Cases per 100K", "Percent positive tests", "CLI", "Hospitalizations", "Worried about severe illness", "No contacts outside home", "Avoiding others all/most of time",
                                              "No contacts outside home ", "Less than 2 contacts outside home",
                                               "Less than 3 contacts outside home",  "More than 6 contacts outside home", "Average contacts outside home", "Median contacts outside home", "Masks all or most of the time in public", "Public activities", "Indoor public activities", "Mask during public activities", "High risk public activities", "Unmasked public activities")),
        value2 = c(NA, diff(value)))

plot2b = plotK %>%
  group_by(var, var_cat, date, region) %>% 
  summarize(state_id = state_cat[1],
    value = weighted.mean(value, w = weight),
           value_raw = mean(value)) %>% 
  mutate(state_id = "Average") %>%
  group_by(var, var_cat, region) %>%
         mutate(value2 = c(NA, diff(value)))

plot2_temp = bind_rows(plotK, plot2b) %>% mutate(alpha = ifelse(state_id=="Average", 1, .05), 
                                                  col = ifelse(var=="contacts_avg_mod", value2 > 0, value2 < 0)) 
 # NULL

plot2 = plot2_temp

plot2a = ggplot(plot2 %>% filter(var=="cases100K_value"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  #geom_point(aes(x = as.Date("2020-08-31")), col = "white", size = 5) + 
  #geom_text(aes(x = as.Date("2020-08-31"), label = ifelse(date=="2020-08-30", state_id, NA)), size = 3) + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") + scale_shape(guide = F) +
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

plot2b = ggplot(plot2 %>% filter(var=="cli_v1"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "") + ylim(0, NA)

plot2c = ggplot(plot2 %>% filter(var=="contacts_avg_mod"), aes(x = date, y = value, group = paste(var, state_id, date>="2020-09-08"), alpha = alpha)) + geom_line() + 
  theme_minimal() + scale_color_brewer(name = "", palette= "Set1") +  scale_shape(guide = F) + 
  #geom_point(aes(pch = pt_col)) + 
  facet_grid(var_cat~region, scales = "free") + 
  scale_alpha(guide = F) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) + labs(x = "", y = "")+ ylim(0, NA)

ggarrange(plot2a, plot2b, plot2c, nrow = 3, common.legend = TRUE, legend="right")
```

